@model Build
@{
    ViewBag.Title = (string)ViewContext.RouteData.Values["action"] == nameof(FrontController.AddBuild)
        ? $"{VariantTerms.Common_AddBuild} | {InvariantTerms.SiteName}"
        : $"{VariantTerms.Front_EditBuild} {Model.FullBuildString} | {InvariantTerms.SiteName}";
}

@section head
{
    <link href="~/Scripts/trumbowyg/ui/trumbowyg.min.css" rel="stylesheet" type="text/css" />
}

@if ((string)ViewContext.RouteData.Values["action"] == nameof(FrontController.AddBuild))
{
    <h1>@VariantTerms.Common_AddBuild</h1>
}
else
{
    <h1 class="eager-wrapping">@VariantTerms.Front_EditBuild @Model.AlternateBuildString</h1>
}

<div class="form-group">
    <label for="quickpaste">@VariantTerms.Front_QuickPaste</label>
    <div>
        <input id="quickpaste" type="text" />
    </div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true)

    <div class="form-group">
        @Html.LabelFor(model => model.MajorVersion)
        <div>
            @Html.TextBoxFor(model => model.MajorVersion)
            @Html.ValidationMessageFor(model => model.MajorVersion)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MinorVersion)
        <div>
            @Html.TextBoxFor(model => model.MinorVersion)
            @Html.ValidationMessageFor(model => model.MinorVersion)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Number)
        <div>
            @Html.TextBoxFor(model => model.Number)
            @Html.ValidationMessageFor(model => model.Number)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Revision)
        <div>
            @Html.TextBoxFor(model => model.Revision)
            @Html.ValidationMessageFor(model => model.Revision)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Lab)
        <div>
            @Html.TextBoxFor(model => model.Lab)
            @Html.ValidationMessageFor(model => model.Lab)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BuildTime)
        <div>
            @Html.TextBoxFor(model => model.BuildTime, "{0:yyMMdd-HHmm}")
            @Html.ValidationMessageFor(model => model.BuildTime)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SourceType)
        <div>
            @Html.DropDownListFor(model => model.SourceType, Html.GetEnumSelectList<TypeOfSource>())
            @Html.ValidationMessageFor(model => model.SourceType)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LeakDate)
        <div>
            <div class="group-input-button">
                @Html.TextBoxFor(model => model.LeakDate, "{0:dd/MM/yyyy}")
                <button onclick="$('#@Html.IdFor(model => model.LeakDate)').val('@DateTime.Now.ToShortDateString()');return false;">@VariantTerms.Front_Today</button>
            </div>
            @Html.ValidationMessageFor(model => model.LeakDate)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SourceDetails)
        <div class="wide-group">
            @Html.TextAreaFor(model => model.SourceDetails)
            @Html.ValidationMessageFor(model => model.SourceDetails)
        </div>
    </div>

    <div class="form-group">
        <span class="label-placeholder"></span>
        <div>
            <input type="submit" value="@((string)ViewContext.RouteData.Values["action"] == nameof(FrontController.AddBuild)
                                              ? VariantTerms.Common_AddBuild
                                              : VariantTerms.Front_EditBuild)" />
            &ensp;
            <a href="/" onclick="window.history.back();return false;" class="button">
                @VariantTerms.Front_ReturnToListing
            </a>
        </div>
    </div>
}

@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous">
    </script>
    <script src="~/Scripts/trumbowyg/trumbowyg.min.js" type="text/javascript"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.17.0/jquery.validate.min.js" integrity="sha256-F6h55Qw6sweK+t7SiOJX+2bpSAa3b/fnlrVCJvmEj1A=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.6/jquery.validate.unobtrusive.min.js" integrity="sha256-g1QKGxqsp+x5JkuN/JjHl96je2wztgS5Wo4h4c7gm9M=" crossorigin="anonymous"></script>

    <script type="text/javascript">
        jQuery(function($)
        {
            $.validator.addMethod('date',
                function(value, element)
                {
                    if (this.optional(element))
                    {
                        return true;
                    }

                    var ok = true;
                    try
                    {
                        new Date(Date.parse(value, "yyMMdd-HHmm"));
                    }
                    catch (err)
                    {
                        ok = false;
                    }
                    return ok;
                });
        });

        $(function()
        {
            $.trumbowyg.svgPath = "/Scripts/trumbowyg/ui/icons.svg";

            $("#@Html.IdFor(model => model.SourceDetails)")
                .trumbowyg({
                    autogrow: true,
                    btns: [
                        ['strong', 'em'],
                        '|', 'link',
                        '|', ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],
                        '|', ['unorderedList', 'orderedList'],
                        '|', 'viewHTML',
                        '|'
                    ]
                });

            //$(".trumbowyg").addClass("trumbowyg-black");

            $("#quickpaste")
                .change(function()
                {
                    var regex =
                        /(([\d]{1,2})\.([\d]{1,2})\.)?([\d]{4,5})(\.([\d]{1,5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?/;
                    var result = regex.exec($("#quickpaste").val());

                    $("#MajorVersion").val(result[2]);
                    $("#MinorVersion").val(result[3]);
                    $("#Number").val(result[4]);
                    $("#Revision").val(result[6]);
                    $("#Lab").val(result[8]);
                    $("#BuildTime").val(result[9]);
                });
        });
    </script>
}